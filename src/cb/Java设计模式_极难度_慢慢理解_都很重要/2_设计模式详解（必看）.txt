摘自两篇文章：
	http://blog.csdn.net/lhy_ycu/article/details/40031567
	http://blog.csdn.net/jason0539/article/details/44956775

一、设计模式的分类
	总体来说设计模式分为三大类：
		创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
		结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
		行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。

二、设计模式的六大原则
	1、开闭原则（Open Close Principle）
		开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。
		所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。
	2、里氏代换原则（Liskov Substitution Principle）
		里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 
		里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，
		而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。
		而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科
	3、依赖倒转原则（Dependence Inversion Principle）
		这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。
	4、接口隔离原则（Interface Segregation Principle）
		这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。
		还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。
		所以上文中多次出现：降低依赖，降低耦合。
	5、迪米特法则（最少知道原则）（Demeter Principle）
		为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
	6、合成复用原则（Composite Reuse Principle）
		原则是尽量使用合成/聚合的方式，而不是使用继承。
		
三、这二十三种设计模式的作用理解
	1、创建型(Creator)模式（共5种）
		单例(Singleton):
			是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。实现方式主要有饿汉式和懒汉式两种。
		原型(Prototype):		// 【JavaScript就是基于原型的面向对象语言】
			该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。实现方式主要有浅复制和深复制两种。
			浅复制的关键是super.clone()；而深复制，需要采用二进制流的形式写入当前对象，再对其进行读取。
		工厂(Factory method):
			调用工厂里的方法来生产对象(产品)的。
			它有3种实现方式：
				1)普通工厂模式：就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。
				2)多个工厂方法模式：是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。
				3)静态工厂方法模式：将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。如果你想使用工厂方法模式可以优先选择：静态工厂方法模式。
		抽象工厂(Abstract factory)
			顾名思义，就是把工厂抽象出来，不同的工厂生产不同的产品。
		建造者(Builder):
			该模式是将各种产品集中起来进行管理。将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。它关注的是创建复合对象，多个部分。
		
	2、结构型(Structure)模式（共7种）
		适配器(Adapter)：
			将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。
			主要分为三类：
				1)类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。
				2)对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Adapter类，持有原类的一个实例，在Adapter类的方法中，调用实例的方法就行。
				3)接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter实现所有方法，我们写别的类的时候，继承抽象类即可。
		代理(Proxy)：
			代理模式其实就是多一个代理类出来，替原对象进行一些操作。
			比如咱有的时候打官司需要请律师，因为律师在法律方面有专长，可以替咱进行操作表达咱的想法，这就是代理的意思。
			有两种实现方式：
				静态代理(不使用JDK里面的方法)、动态代理(InvocationHandler和Proxy)。
		外观(Facade)：
			也称门面模式。外观模式是为了解决类与类之间的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，
			而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口。
		桥接(Bridge)：
			把事物和其具体实现分开(抽象化与实现化解耦)，使他们可以各自独立的变化。桥接模式其实就是一种将N*M转化成N+M组合的思想。
		组合(Composite)：
			组合模式有时又叫部分-整体模式，将对象组合成树形结构来表示“部分-整体”层次结构。
		享元(Flyweight)：
			运用共享的技术有效地支持大量细粒度的对象。主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销。在某种程度上，你可以把单例看成是享元的一种特例。
		装饰者(Decorator)：
			动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更具有弹性的替代方案。保持接口，增强性能。
		
	行为型(Behavior)模式（共11种）
		策略(Strategy):
			让用户可以选择执行一个动作的方法，也就是说，用户可以选择不同的策略来进行操作。
			个人觉得策略模式可以用这个公式：不同的XXX 拥有不同的XXX供用户选择。比如说：不同的象棋棋子拥有不同的走法供用户选择。
		观察者(Observer):					// 【其实就是一个哨兵】
			在对象之间定义了一对多的依赖关系，这样一来，当一个对象改变状态时，依赖它的对象都会收到通知并自动跟新。
			Java已经提供了对观察者Observer模式的默认实现，Java对观察者模式的支持主要体现在Observable类和Observer接口。
		模板方法(Template method):
			在一个方法中定义了一个算法的骨架，而将一些步骤延迟到子类中。
			模板方法使得子类可以再不改变算法结构的情况下，重新定义算法中的某些步骤。
			简而言之：模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。
		迭代器(Iterator):
			提供了一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
		责任链(ChainOfResponsibility):
			有多个对象，每个对象持有下一个对象的引用，形成一条链，请求在这条链上传递，直到某一对象决定处理该请求，但是发出者并不清楚最终哪个对象会处理该请求。
		命令(Command):
			将“请求”(命令/口令)封装成一个对象，以便使用不同的请求、队列或者日志来参数化其对象。命令模式也支持撤销操作。
		备忘录(Memento):
			主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象。
		状态(State):
			允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。状态模式说白了就是一个对像有不同的状态，不同的状态对应不同的行为，它其实是对switch case这样的语句的拓展。
		解释器(Interpreter):
			它定义了对象与对象之间进行某种操作之后会得到什么值。一般主要应用在OOP开发中的编译器的开发中，所以适用面比较窄。
		中介者(Mediator):
			主要用来降低类与类之间的耦合的，因为如果类与类之间有依赖关系的话，不利于功能的拓展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。
		访问者(Visitor):
			把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。
			访问者模式适用于数据结构相对稳定而算法又容易变化的系统。
			访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者；而它的缺点就是增加新的数据结构很困难。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		